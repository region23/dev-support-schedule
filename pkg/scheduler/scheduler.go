package scheduler

import (
	"dev-support-schedule/pkg/models"
	"errors"
	"fmt"
	"time"
)

const (
	DutyTypeInstancesRelease = "instances_release"
	DutyTypeExpressRelease   = "express_release"
	DutyTypeSupport          = "support"
	NoDuty                   = "no_duty"
)

func NextMonday() time.Time {
	today := time.Now().Weekday()
	var daysToAdd int

	switch today {
	case time.Monday:
		daysToAdd = 0
	case time.Tuesday:
		daysToAdd = 6
	case time.Wednesday:
		daysToAdd = 5
	case time.Thursday:
		daysToAdd = 4
	case time.Friday:
		daysToAdd = 3
	case time.Saturday:
		daysToAdd = 2
	case time.Sunday:
		daysToAdd = 1
	}

	nextMonday := time.Now().AddDate(0, 0, daysToAdd)
	return nextMonday.Truncate(24 * time.Hour)
}

// getQuarterStartDate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞.
func GetQuarterStartDate() time.Time {
	// –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
	today := time.Now()

	// –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∞–ª
	quarter := (today.Month() - 1) / 3

	// –≤–µ—Ä–Ω—É—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞
	return time.Date(today.Year(), time.Month(quarter*3+1), 1, 0, 0, 0, 0, time.UTC)

}

// –≤–µ—Ä–Ω—É—Ç—å –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
func GetWeekEndDate() time.Time {
	today := time.Now()
	weekDay := today.Weekday()
	daysToAdd := 7 - int(weekDay)
	return today.AddDate(0, 0, daysToAdd)
}

// filterEmployee –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π.
func filterEmployee(employee models.DutySummary, findForInstances bool, expressEmployee *models.DutyHistory) bool {
	if employee.Status == models.StatusVacation || employee.Status == models.StatusSick || employee.Status == models.StatusFired {
		return false
	}

	if findForInstances && employee.UserID == expressEmployee.UserID {
		return false
	}

	// –Ω–æ–≤–µ–Ω—å–∫–∏–π, –∫—Ç–æ –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –¥–µ–∂—É—Ä–∏–ª
	if employee.DutyType == NoDuty {
		return true
	}

	if findForInstances && employee.DutyType != DutyTypeInstancesRelease {
		return false
	}

	if !findForInstances && employee.DutyType != DutyTypeExpressRelease {
		return false
	}

	return true
}

// findEmployeeForReleases –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞ —Ç–∏–ø–∞ "Instances release".
func findEmployeeForReleases(employees []models.DutySummary, findForInstances bool, expressEmployee *models.DutyHistory) (models.DutyHistory, error) {
	// –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —á–∏—Å–ª–∞ –¥–µ–∂—É—Ä—Å—Ç–≤ –∏ –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞

	for _, employee := range employees {
		if !filterEmployee(employee, findForInstances, expressEmployee) {
			continue
		}

		dutyType := DutyTypeExpressRelease

		if findForInstances {
			dutyType = DutyTypeInstancesRelease
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω–µ–µ 2 –Ω–µ–¥–µ–ª—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
		if employee.DutyTypeCount == 0 || (employee.LastDutyDate.Valid && time.Since(employee.LastDutyDate.Time).Hours() >= 14*24) {
			return models.DutyHistory{
				UserID:   employee.UserID,
				Name:     employee.Name,
				Nickname: employee.Nickname,
				DutyDate: NextMonday(),
				DutyType: dutyType,
			}, nil
		}
	}

	var dtName string
	if findForInstances {
		dtName = "Instances release"
	} else {
		dtName = "Express release"
	}

	return models.DutyHistory{}, fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞ '%s'", dtName)
}

// findEmployeeForSupport –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞ —Ç–∏–ø–∞ "Support".
func findEmployeeForSupport(employees []models.DutySummary) ([]models.DutyHistory, error) {
	// –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∂—É—Ä–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
	assignedEmployees := []models.DutyHistory{}

	for _, employee := range employees {
		// –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª–µ–µ—Ç, –≤ –æ—Ç–ø—É—Å–∫–µ –∏–ª–∏ —É–≤–æ–ª–µ–Ω.
		if employee.Status == models.StatusVacation || employee.Status == models.StatusSick || employee.Status == models.StatusFired {
			continue
		}

		if employee.DutyType != DutyTypeSupport && employee.DutyType != NoDuty {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω–µ–µ 7 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
		if employee.DutyTypeCount == 0 || (employee.LastDutyDate.Valid && time.Since(employee.LastDutyDate.Time).Hours() >= 7*24) {
			selectedEmployee := models.DutyHistory{
				UserID:   employee.UserID,
				Name:     employee.Name,
				Nickname: employee.Nickname,
				DutyDate: NextMonday().AddDate(0, 0, len(assignedEmployees)),
				DutyType: DutyTypeSupport,
			}

			assignedEmployees = append(assignedEmployees, selectedEmployee)
			if len(assignedEmployees) == 5 { // –µ—Å–ª–∏ –º—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä
				break
			}
		}
	}

	if len(assignedEmployees) == 5 {
		return assignedEmployees, nil
	}

	return assignedEmployees, errors.New("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞ 'Support'")
}

// GetSchedule —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –Ω–µ–¥–µ–ª—é.
func GetSchedule(employees []models.DutySummary) (string, []models.DutyHistory, error) {
	// —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–∏–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ –¥–Ω–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫

	startDate := NextMonday()             // –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
	endDate := startDate.AddDate(0, 0, 4) // –ø—è—Ç–Ω–∏—Ü–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏

	var schedule []models.DutyHistory

	expressEmployee, err := findEmployeeForReleases(employees, false, nil)
	if err != nil {
		return "", nil, err
	}

	schedule = append(schedule, expressEmployee)

	instancesEmployee, err := findEmployeeForReleases(employees, true, &expressEmployee)
	if err != nil {
		return "", nil, err
	}

	schedule = append(schedule, instancesEmployee)

	supportEmployees, err := findEmployeeForSupport(employees)
	if err != nil {
		return "", nil, err
	}

	schedule = append(schedule, supportEmployees...)

	supportSchedule := ""
	for _, supportEmploye := range supportEmployees {
		supportSchedule += fmt.Sprintf("%s - %s\n", supportEmploye.Nickname, supportEmploye.DutyDate.Format("Monday"))
	}

	result := fmt.Sprintf(
		"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üëæ\n**–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç –∏ —Ä–µ–ª–∏–∑ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ —Å %s –ø–æ %s**\n**–†–µ–ª–∏–∑—ã**\n%s - Express Release\n%s - Instances release\n\n**–°–∞–ø–ø–æ—Ä—Ç**\n%s\n\n–õ—é–±–µ–∑–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ü§ñ\nP.S. –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏—Ç–µ –∞–Ω–æ–º–∞–ª–∏–∏, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å - –∞–ª–≥–æ—Ä–∏—Ç–º —Ç—Ä–µ–±—É–µ—Ç –¥–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòâ",
		startDate.Format("2 January"), endDate.Format("2 January"),
		expressEmployee.Nickname, instancesEmployee.Nickname, supportSchedule)

	return result, schedule, nil
}

func AllEmployees(employees *[]models.DutySummary) string {
	currentUserID := 0
	result := ""

	// –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –∑–¥–µ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ ID
	for _, employee := range *employees {
		if currentUserID != employee.UserID {
			if currentUserID != 0 {
				result += "\n" // print a newline before the next user
			}
			result += fmt.Sprintf("%d. %s (%s) | ", employee.UserID, employee.Name, getStatusEmoji(employee.Status))
			currentUserID = employee.UserID
		}

		if employee.LastDutyDate.Valid {
			result += fmt.Sprintf("%s (%d), –ø–æ—Å–ª–µ–¥–Ω–µ–µ %s | ", getDutyTypeName(employee.DutyType), employee.DutyTypeCount, employee.LastDutyDate.Time.Format("2006.01.02"))
		} else {
			result += getDutyTypeName(employee.DutyType)
		}
	}

	return result
}

func getStatusEmoji(status string) string {
	switch status {
	case models.StatusSick:
		return "–±–æ–ª–µ–µ—Ç ü§í"
	case models.StatusVacation:
		return "–≤ –æ—Ç–ø—É—Å–∫–µ üèñ"
	default:
		return "–¥–æ—Å—Ç—É–ø–µ–Ω üëç"
	}
}

func getDutyTypeName(dutyType string) string {
	switch dutyType {
	case DutyTypeInstancesRelease:
		return "Instances release"
	case DutyTypeExpressRelease:
		return "Express release"
	case NoDuty:
		return "–ù–µ –¥–µ–∂—É—Ä–∏–ª"
	default:
		return "Support"
	}
}
